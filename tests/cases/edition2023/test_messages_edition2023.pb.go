// Code generated by prutalgen. DO NOT EDIT.
// prutalgen --proto_path=. --go_out=. --go_opt=paths=source_relative --go_opt=Mtest_messages_edition2023.proto=./edition2023 --gen_getter=true ./test_messages_edition2023.proto

package edition2023

import "strconv"

type ForeignEnumEdition2023 int32

const (
	ForeignEnumEdition2023_FOREIGN_FOO ForeignEnumEdition2023 = 0
	ForeignEnumEdition2023_FOREIGN_BAR ForeignEnumEdition2023 = 1
	ForeignEnumEdition2023_FOREIGN_BAZ ForeignEnumEdition2023 = 2
)

// Enum value maps for ForeignEnumEdition2023.
var ForeignEnumEdition2023_name = map[int32]string{
	0: "FOREIGN_FOO",
	1: "FOREIGN_BAR",
	2: "FOREIGN_BAZ",
}

var ForeignEnumEdition2023_value = map[string]int32{
	"FOREIGN_FOO": 0,
	"FOREIGN_BAR": 1,
	"FOREIGN_BAZ": 2,
}

func (x ForeignEnumEdition2023) String() string {
	s, ok := ForeignEnumEdition2023_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type TestAllTypesEdition2023_NestedEnum int32

const (
	TestAllTypesEdition2023_FOO TestAllTypesEdition2023_NestedEnum = 0
	TestAllTypesEdition2023_BAR TestAllTypesEdition2023_NestedEnum = 1
	TestAllTypesEdition2023_BAZ TestAllTypesEdition2023_NestedEnum = 2
	TestAllTypesEdition2023_NEG TestAllTypesEdition2023_NestedEnum = -1 // Intentionally negative.
)

// Enum value maps for TestAllTypesEdition2023_NestedEnum.
var TestAllTypesEdition2023_NestedEnum_name = map[int32]string{
	0:  "FOO",
	1:  "BAR",
	2:  "BAZ",
	-1: "NEG",
}

var TestAllTypesEdition2023_NestedEnum_value = map[string]int32{
	"FOO": 0,
	"BAR": 1,
	"BAZ": 2,
	"NEG": -1,
}

func (x TestAllTypesEdition2023_NestedEnum) String() string {
	s, ok := TestAllTypesEdition2023_NestedEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type ComplexMessage struct {
	D *int32 `protobuf:"varint,1,opt,name=d" json:"d,omitempty"`
}

func (x *ComplexMessage) Reset() { *x = ComplexMessage{} }

func (x *ComplexMessage) GetD() int32 {
	if x != nil && x.D != nil {
		return *x.D
	}
	return 0
}

type TestAllTypesEdition2023 struct {
	// Singular
	OptionalInt32          *int32                                 `protobuf:"varint,1,opt,name=optional_int32" json:"optional_int32,omitempty"`
	OptionalInt64          *int64                                 `protobuf:"varint,2,opt,name=optional_int64" json:"optional_int64,omitempty"`
	OptionalUint32         *uint32                                `protobuf:"varint,3,opt,name=optional_uint32" json:"optional_uint32,omitempty"`
	OptionalUint64         *uint64                                `protobuf:"varint,4,opt,name=optional_uint64" json:"optional_uint64,omitempty"`
	OptionalSint32         *int32                                 `protobuf:"zigzag32,5,opt,name=optional_sint32" json:"optional_sint32,omitempty"`
	OptionalSint64         *int64                                 `protobuf:"zigzag64,6,opt,name=optional_sint64" json:"optional_sint64,omitempty"`
	OptionalFixed32        *uint32                                `protobuf:"fixed32,7,opt,name=optional_fixed32" json:"optional_fixed32,omitempty"`
	OptionalFixed64        *uint64                                `protobuf:"fixed64,8,opt,name=optional_fixed64" json:"optional_fixed64,omitempty"`
	OptionalSfixed32       *int32                                 `protobuf:"fixed32,9,opt,name=optional_sfixed32" json:"optional_sfixed32,omitempty"`
	OptionalSfixed64       *int64                                 `protobuf:"fixed64,10,opt,name=optional_sfixed64" json:"optional_sfixed64,omitempty"`
	OptionalFloat          *float32                               `protobuf:"fixed32,11,opt,name=optional_float" json:"optional_float,omitempty"`
	OptionalDouble         *float64                               `protobuf:"fixed64,12,opt,name=optional_double" json:"optional_double,omitempty"`
	OptionalBool           *bool                                  `protobuf:"varint,13,opt,name=optional_bool" json:"optional_bool,omitempty"`
	OptionalString         *string                                `protobuf:"bytes,14,opt,name=optional_string" json:"optional_string,omitempty"`
	OptionalBytes          []byte                                 `protobuf:"bytes,15,opt,name=optional_bytes" json:"optional_bytes,omitempty"`
	OptionalNestedMessage  *TestAllTypesEdition2023_NestedMessage `protobuf:"bytes,18,opt,name=optional_nested_message" json:"optional_nested_message,omitempty"`
	OptionalForeignMessage *ForeignMessageEdition2023             `protobuf:"bytes,19,opt,name=optional_foreign_message" json:"optional_foreign_message,omitempty"`
	OptionalNestedEnum     *TestAllTypesEdition2023_NestedEnum    `protobuf:"varint,21,opt,name=optional_nested_enum" json:"optional_nested_enum,omitempty"`
	OptionalForeignEnum    *ForeignEnumEdition2023                `protobuf:"varint,22,opt,name=optional_foreign_enum" json:"optional_foreign_enum,omitempty"`
	OptionalStringPiece    *string                                `protobuf:"bytes,24,opt,name=optional_string_piece" json:"optional_string_piece,omitempty"`
	OptionalCord           *string                                `protobuf:"bytes,25,opt,name=optional_cord" json:"optional_cord,omitempty"`
	RecursiveMessage       *TestAllTypesEdition2023               `protobuf:"bytes,27,opt,name=recursive_message" json:"recursive_message,omitempty"`

	// Repeated
	RepeatedInt32          []int32                                  `protobuf:"varint,31,rep,packed,name=repeated_int32" json:"repeated_int32,omitempty"`
	RepeatedInt64          []int64                                  `protobuf:"varint,32,rep,packed,name=repeated_int64" json:"repeated_int64,omitempty"`
	RepeatedUint32         []uint32                                 `protobuf:"varint,33,rep,packed,name=repeated_uint32" json:"repeated_uint32,omitempty"`
	RepeatedUint64         []uint64                                 `protobuf:"varint,34,rep,packed,name=repeated_uint64" json:"repeated_uint64,omitempty"`
	RepeatedSint32         []int32                                  `protobuf:"zigzag32,35,rep,packed,name=repeated_sint32" json:"repeated_sint32,omitempty"`
	RepeatedSint64         []int64                                  `protobuf:"zigzag64,36,rep,packed,name=repeated_sint64" json:"repeated_sint64,omitempty"`
	RepeatedFixed32        []uint32                                 `protobuf:"fixed32,37,rep,packed,name=repeated_fixed32" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64        []uint64                                 `protobuf:"fixed64,38,rep,packed,name=repeated_fixed64" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32       []int32                                  `protobuf:"fixed32,39,rep,packed,name=repeated_sfixed32" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64       []int64                                  `protobuf:"fixed64,40,rep,packed,name=repeated_sfixed64" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat          []float32                                `protobuf:"fixed32,41,rep,packed,name=repeated_float" json:"repeated_float,omitempty"`
	RepeatedDouble         []float64                                `protobuf:"fixed64,42,rep,packed,name=repeated_double" json:"repeated_double,omitempty"`
	RepeatedBool           []bool                                   `protobuf:"varint,43,rep,packed,name=repeated_bool" json:"repeated_bool,omitempty"`
	RepeatedString         []string                                 `protobuf:"bytes,44,rep,name=repeated_string" json:"repeated_string,omitempty"`
	RepeatedBytes          [][]byte                                 `protobuf:"bytes,45,rep,name=repeated_bytes" json:"repeated_bytes,omitempty"`
	RepeatedNestedMessage  []*TestAllTypesEdition2023_NestedMessage `protobuf:"bytes,48,rep,name=repeated_nested_message" json:"repeated_nested_message,omitempty"`
	RepeatedForeignMessage []*ForeignMessageEdition2023             `protobuf:"bytes,49,rep,name=repeated_foreign_message" json:"repeated_foreign_message,omitempty"`
	RepeatedNestedEnum     []TestAllTypesEdition2023_NestedEnum     `protobuf:"varint,51,rep,packed,name=repeated_nested_enum" json:"repeated_nested_enum,omitempty"`
	RepeatedForeignEnum    []ForeignEnumEdition2023                 `protobuf:"varint,52,rep,packed,name=repeated_foreign_enum" json:"repeated_foreign_enum,omitempty"`
	RepeatedStringPiece    []string                                 `protobuf:"bytes,54,rep,name=repeated_string_piece" json:"repeated_string_piece,omitempty"`
	RepeatedCord           []string                                 `protobuf:"bytes,55,rep,name=repeated_cord" json:"repeated_cord,omitempty"`

	// Packed
	PackedInt32      []int32                              `protobuf:"varint,75,rep,packed,name=packed_int32" json:"packed_int32,omitempty"`
	PackedInt64      []int64                              `protobuf:"varint,76,rep,packed,name=packed_int64" json:"packed_int64,omitempty"`
	PackedUint32     []uint32                             `protobuf:"varint,77,rep,packed,name=packed_uint32" json:"packed_uint32,omitempty"`
	PackedUint64     []uint64                             `protobuf:"varint,78,rep,packed,name=packed_uint64" json:"packed_uint64,omitempty"`
	PackedSint32     []int32                              `protobuf:"zigzag32,79,rep,packed,name=packed_sint32" json:"packed_sint32,omitempty"`
	PackedSint64     []int64                              `protobuf:"zigzag64,80,rep,packed,name=packed_sint64" json:"packed_sint64,omitempty"`
	PackedFixed32    []uint32                             `protobuf:"fixed32,81,rep,packed,name=packed_fixed32" json:"packed_fixed32,omitempty"`
	PackedFixed64    []uint64                             `protobuf:"fixed64,82,rep,packed,name=packed_fixed64" json:"packed_fixed64,omitempty"`
	PackedSfixed32   []int32                              `protobuf:"fixed32,83,rep,packed,name=packed_sfixed32" json:"packed_sfixed32,omitempty"`
	PackedSfixed64   []int64                              `protobuf:"fixed64,84,rep,packed,name=packed_sfixed64" json:"packed_sfixed64,omitempty"`
	PackedFloat      []float32                            `protobuf:"fixed32,85,rep,packed,name=packed_float" json:"packed_float,omitempty"`
	PackedDouble     []float64                            `protobuf:"fixed64,86,rep,packed,name=packed_double" json:"packed_double,omitempty"`
	PackedBool       []bool                               `protobuf:"varint,87,rep,packed,name=packed_bool" json:"packed_bool,omitempty"`
	PackedNestedEnum []TestAllTypesEdition2023_NestedEnum `protobuf:"varint,88,rep,packed,name=packed_nested_enum" json:"packed_nested_enum,omitempty"`

	// Unpacked
	UnpackedInt32      []int32                              `protobuf:"varint,89,rep,name=unpacked_int32" json:"unpacked_int32,omitempty"`
	UnpackedInt64      []int64                              `protobuf:"varint,90,rep,name=unpacked_int64" json:"unpacked_int64,omitempty"`
	UnpackedUint32     []uint32                             `protobuf:"varint,91,rep,name=unpacked_uint32" json:"unpacked_uint32,omitempty"`
	UnpackedUint64     []uint64                             `protobuf:"varint,92,rep,name=unpacked_uint64" json:"unpacked_uint64,omitempty"`
	UnpackedSint32     []int32                              `protobuf:"zigzag32,93,rep,name=unpacked_sint32" json:"unpacked_sint32,omitempty"`
	UnpackedSint64     []int64                              `protobuf:"zigzag64,94,rep,name=unpacked_sint64" json:"unpacked_sint64,omitempty"`
	UnpackedFixed32    []uint32                             `protobuf:"fixed32,95,rep,name=unpacked_fixed32" json:"unpacked_fixed32,omitempty"`
	UnpackedFixed64    []uint64                             `protobuf:"fixed64,96,rep,name=unpacked_fixed64" json:"unpacked_fixed64,omitempty"`
	UnpackedSfixed32   []int32                              `protobuf:"fixed32,97,rep,name=unpacked_sfixed32" json:"unpacked_sfixed32,omitempty"`
	UnpackedSfixed64   []int64                              `protobuf:"fixed64,98,rep,name=unpacked_sfixed64" json:"unpacked_sfixed64,omitempty"`
	UnpackedFloat      []float32                            `protobuf:"fixed32,99,rep,name=unpacked_float" json:"unpacked_float,omitempty"`
	UnpackedDouble     []float64                            `protobuf:"fixed64,100,rep,name=unpacked_double" json:"unpacked_double,omitempty"`
	UnpackedBool       []bool                               `protobuf:"varint,101,rep,name=unpacked_bool" json:"unpacked_bool,omitempty"`
	UnpackedNestedEnum []TestAllTypesEdition2023_NestedEnum `protobuf:"varint,102,rep,name=unpacked_nested_enum" json:"unpacked_nested_enum,omitempty"`

	// Map
	MapInt32Int32           map[int32]int32                                   `protobuf:"bytes,56,rep,name=map_int32_int32" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64Int64           map[int64]int64                                   `protobuf:"bytes,57,rep,name=map_int64_int64" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32Uint32         map[uint32]uint32                                 `protobuf:"bytes,58,rep,name=map_uint32_uint32" json:"map_uint32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64Uint64         map[uint64]uint64                                 `protobuf:"bytes,59,rep,name=map_uint64_uint64" json:"map_uint64_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapSint32Sint32         map[int32]int32                                   `protobuf:"bytes,60,rep,name=map_sint32_sint32" json:"map_sint32_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	MapSint64Sint64         map[int64]int64                                   `protobuf:"bytes,61,rep,name=map_sint64_sint64" json:"map_sint64_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	MapFixed32Fixed32       map[uint32]uint32                                 `protobuf:"bytes,62,rep,name=map_fixed32_fixed32" json:"map_fixed32_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapFixed64Fixed64       map[uint64]uint64                                 `protobuf:"bytes,63,rep,name=map_fixed64_fixed64" json:"map_fixed64_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapSfixed32Sfixed32     map[int32]int32                                   `protobuf:"bytes,64,rep,name=map_sfixed32_sfixed32" json:"map_sfixed32_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapSfixed64Sfixed64     map[int64]int64                                   `protobuf:"bytes,65,rep,name=map_sfixed64_sfixed64" json:"map_sfixed64_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapInt32Float           map[int32]float32                                 `protobuf:"bytes,66,rep,name=map_int32_float" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapInt32Double          map[int32]float64                                 `protobuf:"bytes,67,rep,name=map_int32_double" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapBoolBool             map[bool]bool                                     `protobuf:"bytes,68,rep,name=map_bool_bool" json:"map_bool_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringString         map[string]string                                 `protobuf:"bytes,69,rep,name=map_string_string" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringBytes          map[string][]byte                                 `protobuf:"bytes,70,rep,name=map_string_bytes" json:"map_string_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringNestedMessage  map[string]*TestAllTypesEdition2023_NestedMessage `protobuf:"bytes,71,rep,name=map_string_nested_message" json:"map_string_nested_message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringForeignMessage map[string]*ForeignMessageEdition2023             `protobuf:"bytes,72,rep,name=map_string_foreign_message" json:"map_string_foreign_message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringNestedEnum     map[string]TestAllTypesEdition2023_NestedEnum     `protobuf:"bytes,73,rep,name=map_string_nested_enum" json:"map_string_nested_enum,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringForeignEnum    map[string]ForeignEnumEdition2023                 `protobuf:"bytes,74,rep,name=map_string_foreign_enum" json:"map_string_foreign_enum,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Types that are assignable to OneofField:
	//
	//	*TestAllTypesEdition2023_OneofUint32
	//	*TestAllTypesEdition2023_OneofNestedMessage
	//	*TestAllTypesEdition2023_OneofString
	//	*TestAllTypesEdition2023_OneofBytes
	//	*TestAllTypesEdition2023_OneofBool
	//	*TestAllTypesEdition2023_OneofUint64
	//	*TestAllTypesEdition2023_OneofFloat
	//	*TestAllTypesEdition2023_OneofDouble
	//	*TestAllTypesEdition2023_OneofEnum
	OneofField     isTestAllTypesEdition2023_OneofField   `protobuf_oneof:"oneof_field"`
	Groupliketype  *TestAllTypesEdition2023_GroupLikeType `protobuf:"bytes,201,opt,name=groupliketype" json:"groupliketype,omitempty"`
	DelimitedField *TestAllTypesEdition2023_GroupLikeType `protobuf:"bytes,202,opt,name=delimited_field" json:"delimited_field,omitempty"`
}

func (x *TestAllTypesEdition2023) Reset() { *x = TestAllTypesEdition2023{} }

func (x *TestAllTypesEdition2023) GetOptionalInt32() int32 {
	if x != nil && x.OptionalInt32 != nil {
		return *x.OptionalInt32
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalInt64() int64 {
	if x != nil && x.OptionalInt64 != nil {
		return *x.OptionalInt64
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalUint32() uint32 {
	if x != nil && x.OptionalUint32 != nil {
		return *x.OptionalUint32
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalUint64() uint64 {
	if x != nil && x.OptionalUint64 != nil {
		return *x.OptionalUint64
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalSint32() int32 {
	if x != nil && x.OptionalSint32 != nil {
		return *x.OptionalSint32
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalSint64() int64 {
	if x != nil && x.OptionalSint64 != nil {
		return *x.OptionalSint64
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalFixed32() uint32 {
	if x != nil && x.OptionalFixed32 != nil {
		return *x.OptionalFixed32
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalFixed64() uint64 {
	if x != nil && x.OptionalFixed64 != nil {
		return *x.OptionalFixed64
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalSfixed32() int32 {
	if x != nil && x.OptionalSfixed32 != nil {
		return *x.OptionalSfixed32
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalSfixed64() int64 {
	if x != nil && x.OptionalSfixed64 != nil {
		return *x.OptionalSfixed64
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalFloat() float32 {
	if x != nil && x.OptionalFloat != nil {
		return *x.OptionalFloat
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalDouble() float64 {
	if x != nil && x.OptionalDouble != nil {
		return *x.OptionalDouble
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOptionalBool() bool {
	if x != nil && x.OptionalBool != nil {
		return *x.OptionalBool
	}
	return false
}

func (x *TestAllTypesEdition2023) GetOptionalString() string {
	if x != nil && x.OptionalString != nil {
		return *x.OptionalString
	}
	return ""
}

func (x *TestAllTypesEdition2023) GetOptionalBytes() []byte {
	if x != nil {
		return x.OptionalBytes
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetOptionalNestedMessage() *TestAllTypesEdition2023_NestedMessage {
	if x != nil {
		return x.OptionalNestedMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetOptionalForeignMessage() *ForeignMessageEdition2023 {
	if x != nil {
		return x.OptionalForeignMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetOptionalNestedEnum() TestAllTypesEdition2023_NestedEnum {
	if x != nil && x.OptionalNestedEnum != nil {
		return *x.OptionalNestedEnum
	}
	return TestAllTypesEdition2023_FOO
}

func (x *TestAllTypesEdition2023) GetOptionalForeignEnum() ForeignEnumEdition2023 {
	if x != nil && x.OptionalForeignEnum != nil {
		return *x.OptionalForeignEnum
	}
	return ForeignEnumEdition2023_FOREIGN_FOO
}

func (x *TestAllTypesEdition2023) GetOptionalStringPiece() string {
	if x != nil && x.OptionalStringPiece != nil {
		return *x.OptionalStringPiece
	}
	return ""
}

func (x *TestAllTypesEdition2023) GetOptionalCord() string {
	if x != nil && x.OptionalCord != nil {
		return *x.OptionalCord
	}
	return ""
}

func (x *TestAllTypesEdition2023) GetRecursiveMessage() *TestAllTypesEdition2023 {
	if x != nil {
		return x.RecursiveMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedInt32() []int32 {
	if x != nil {
		return x.RepeatedInt32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedInt64() []int64 {
	if x != nil {
		return x.RepeatedInt64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedUint32() []uint32 {
	if x != nil {
		return x.RepeatedUint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedUint64() []uint64 {
	if x != nil {
		return x.RepeatedUint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedSint32() []int32 {
	if x != nil {
		return x.RepeatedSint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedSint64() []int64 {
	if x != nil {
		return x.RepeatedSint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedFixed32() []uint32 {
	if x != nil {
		return x.RepeatedFixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedFixed64() []uint64 {
	if x != nil {
		return x.RepeatedFixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedSfixed32() []int32 {
	if x != nil {
		return x.RepeatedSfixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedSfixed64() []int64 {
	if x != nil {
		return x.RepeatedSfixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedFloat() []float32 {
	if x != nil {
		return x.RepeatedFloat
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedDouble() []float64 {
	if x != nil {
		return x.RepeatedDouble
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedBool() []bool {
	if x != nil {
		return x.RepeatedBool
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedString() []string {
	if x != nil {
		return x.RepeatedString
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedBytes() [][]byte {
	if x != nil {
		return x.RepeatedBytes
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedNestedMessage() []*TestAllTypesEdition2023_NestedMessage {
	if x != nil {
		return x.RepeatedNestedMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedForeignMessage() []*ForeignMessageEdition2023 {
	if x != nil {
		return x.RepeatedForeignMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedNestedEnum() []TestAllTypesEdition2023_NestedEnum {
	if x != nil {
		return x.RepeatedNestedEnum
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedForeignEnum() []ForeignEnumEdition2023 {
	if x != nil {
		return x.RepeatedForeignEnum
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedStringPiece() []string {
	if x != nil {
		return x.RepeatedStringPiece
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetRepeatedCord() []string {
	if x != nil {
		return x.RepeatedCord
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedInt32() []int32 {
	if x != nil {
		return x.PackedInt32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedInt64() []int64 {
	if x != nil {
		return x.PackedInt64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedUint32() []uint32 {
	if x != nil {
		return x.PackedUint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedUint64() []uint64 {
	if x != nil {
		return x.PackedUint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedSint32() []int32 {
	if x != nil {
		return x.PackedSint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedSint64() []int64 {
	if x != nil {
		return x.PackedSint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedFixed32() []uint32 {
	if x != nil {
		return x.PackedFixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedFixed64() []uint64 {
	if x != nil {
		return x.PackedFixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedSfixed32() []int32 {
	if x != nil {
		return x.PackedSfixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedSfixed64() []int64 {
	if x != nil {
		return x.PackedSfixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedFloat() []float32 {
	if x != nil {
		return x.PackedFloat
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedDouble() []float64 {
	if x != nil {
		return x.PackedDouble
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedBool() []bool {
	if x != nil {
		return x.PackedBool
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetPackedNestedEnum() []TestAllTypesEdition2023_NestedEnum {
	if x != nil {
		return x.PackedNestedEnum
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedInt32() []int32 {
	if x != nil {
		return x.UnpackedInt32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedInt64() []int64 {
	if x != nil {
		return x.UnpackedInt64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedUint32() []uint32 {
	if x != nil {
		return x.UnpackedUint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedUint64() []uint64 {
	if x != nil {
		return x.UnpackedUint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedSint32() []int32 {
	if x != nil {
		return x.UnpackedSint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedSint64() []int64 {
	if x != nil {
		return x.UnpackedSint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedFixed32() []uint32 {
	if x != nil {
		return x.UnpackedFixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedFixed64() []uint64 {
	if x != nil {
		return x.UnpackedFixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedSfixed32() []int32 {
	if x != nil {
		return x.UnpackedSfixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedSfixed64() []int64 {
	if x != nil {
		return x.UnpackedSfixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedFloat() []float32 {
	if x != nil {
		return x.UnpackedFloat
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedDouble() []float64 {
	if x != nil {
		return x.UnpackedDouble
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedBool() []bool {
	if x != nil {
		return x.UnpackedBool
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetUnpackedNestedEnum() []TestAllTypesEdition2023_NestedEnum {
	if x != nil {
		return x.UnpackedNestedEnum
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapInt64Int64() map[int64]int64 {
	if x != nil {
		return x.MapInt64Int64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapUint32Uint32() map[uint32]uint32 {
	if x != nil {
		return x.MapUint32Uint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapUint64Uint64() map[uint64]uint64 {
	if x != nil {
		return x.MapUint64Uint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapSint32Sint32() map[int32]int32 {
	if x != nil {
		return x.MapSint32Sint32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapSint64Sint64() map[int64]int64 {
	if x != nil {
		return x.MapSint64Sint64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapFixed32Fixed32() map[uint32]uint32 {
	if x != nil {
		return x.MapFixed32Fixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapFixed64Fixed64() map[uint64]uint64 {
	if x != nil {
		return x.MapFixed64Fixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapSfixed32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.MapSfixed32Sfixed32
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapSfixed64Sfixed64() map[int64]int64 {
	if x != nil {
		return x.MapSfixed64Sfixed64
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapBoolBool() map[bool]bool {
	if x != nil {
		return x.MapBoolBool
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapStringBytes() map[string][]byte {
	if x != nil {
		return x.MapStringBytes
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapStringNestedMessage() map[string]*TestAllTypesEdition2023_NestedMessage {
	if x != nil {
		return x.MapStringNestedMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapStringForeignMessage() map[string]*ForeignMessageEdition2023 {
	if x != nil {
		return x.MapStringForeignMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapStringNestedEnum() map[string]TestAllTypesEdition2023_NestedEnum {
	if x != nil {
		return x.MapStringNestedEnum
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetMapStringForeignEnum() map[string]ForeignEnumEdition2023 {
	if x != nil {
		return x.MapStringForeignEnum
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetOneofField() isTestAllTypesEdition2023_OneofField {
	if x != nil {
		return x.OneofField
	}
	return nil
}
func (x *TestAllTypesEdition2023) GetOneofUint32() uint32 {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofUint32); ok {
		return p.OneofUint32
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOneofNestedMessage() *TestAllTypesEdition2023_NestedMessage {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofNestedMessage); ok {
		return p.OneofNestedMessage
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetOneofString() string {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofString); ok {
		return p.OneofString
	}
	return ""
}

func (x *TestAllTypesEdition2023) GetOneofBytes() []byte {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofBytes); ok {
		return p.OneofBytes
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetOneofBool() bool {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofBool); ok {
		return p.OneofBool
	}
	return false
}

func (x *TestAllTypesEdition2023) GetOneofUint64() uint64 {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofUint64); ok {
		return p.OneofUint64
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOneofFloat() float32 {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofFloat); ok {
		return p.OneofFloat
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOneofDouble() float64 {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofDouble); ok {
		return p.OneofDouble
	}
	return 0
}

func (x *TestAllTypesEdition2023) GetOneofEnum() TestAllTypesEdition2023_NestedEnum {
	if p, ok := x.GetOneofField().(*TestAllTypesEdition2023_OneofEnum); ok {
		return p.OneofEnum
	}
	return TestAllTypesEdition2023_FOO
}

func (x *TestAllTypesEdition2023) GetGroupliketype() *TestAllTypesEdition2023_GroupLikeType {
	if x != nil {
		return x.Groupliketype
	}
	return nil
}

func (x *TestAllTypesEdition2023) GetDelimitedField() *TestAllTypesEdition2023_GroupLikeType {
	if x != nil {
		return x.DelimitedField
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the prutal package.
func (*TestAllTypesEdition2023) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestAllTypesEdition2023_OneofUint32)(nil),
		(*TestAllTypesEdition2023_OneofNestedMessage)(nil),
		(*TestAllTypesEdition2023_OneofString)(nil),
		(*TestAllTypesEdition2023_OneofBytes)(nil),
		(*TestAllTypesEdition2023_OneofBool)(nil),
		(*TestAllTypesEdition2023_OneofUint64)(nil),
		(*TestAllTypesEdition2023_OneofFloat)(nil),
		(*TestAllTypesEdition2023_OneofDouble)(nil),
		(*TestAllTypesEdition2023_OneofEnum)(nil),
	}
}

type isTestAllTypesEdition2023_OneofField interface {
	isTestAllTypesEdition2023_OneofField()
}

type TestAllTypesEdition2023_OneofUint32 struct {
	OneofUint32 uint32 `protobuf:"varint,111,opt,name=oneof_uint32" json:"oneof_uint32,omitempty"`
}

func (*TestAllTypesEdition2023_OneofUint32) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofNestedMessage struct {
	OneofNestedMessage *TestAllTypesEdition2023_NestedMessage `protobuf:"bytes,112,opt,name=oneof_nested_message" json:"oneof_nested_message,omitempty"`
}

func (*TestAllTypesEdition2023_OneofNestedMessage) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofString struct {
	OneofString string `protobuf:"bytes,113,opt,name=oneof_string" json:"oneof_string,omitempty"`
}

func (*TestAllTypesEdition2023_OneofString) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofBytes struct {
	OneofBytes []byte `protobuf:"bytes,114,opt,name=oneof_bytes" json:"oneof_bytes,omitempty"`
}

func (*TestAllTypesEdition2023_OneofBytes) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofBool struct {
	OneofBool bool `protobuf:"varint,115,opt,name=oneof_bool" json:"oneof_bool,omitempty"`
}

func (*TestAllTypesEdition2023_OneofBool) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofUint64 struct {
	OneofUint64 uint64 `protobuf:"varint,116,opt,name=oneof_uint64" json:"oneof_uint64,omitempty"`
}

func (*TestAllTypesEdition2023_OneofUint64) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofFloat struct {
	OneofFloat float32 `protobuf:"fixed32,117,opt,name=oneof_float" json:"oneof_float,omitempty"`
}

func (*TestAllTypesEdition2023_OneofFloat) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofDouble struct {
	OneofDouble float64 `protobuf:"fixed64,118,opt,name=oneof_double" json:"oneof_double,omitempty"`
}

func (*TestAllTypesEdition2023_OneofDouble) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_OneofEnum struct {
	OneofEnum TestAllTypesEdition2023_NestedEnum `protobuf:"varint,119,opt,name=oneof_enum" json:"oneof_enum,omitempty"`
}

func (*TestAllTypesEdition2023_OneofEnum) isTestAllTypesEdition2023_OneofField() {}

type TestAllTypesEdition2023_NestedMessage struct {
	A           *int32                   `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	Corecursive *TestAllTypesEdition2023 `protobuf:"bytes,2,opt,name=corecursive" json:"corecursive,omitempty"`
}

func (x *TestAllTypesEdition2023_NestedMessage) Reset() { *x = TestAllTypesEdition2023_NestedMessage{} }

func (x *TestAllTypesEdition2023_NestedMessage) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *TestAllTypesEdition2023_NestedMessage) GetCorecursive() *TestAllTypesEdition2023 {
	if x != nil {
		return x.Corecursive
	}
	return nil
}

// groups
type TestAllTypesEdition2023_GroupLikeType struct {
	GroupInt32  *int32  `protobuf:"varint,202,opt,name=group_int32" json:"group_int32,omitempty"`
	GroupUint32 *uint32 `protobuf:"varint,203,opt,name=group_uint32" json:"group_uint32,omitempty"`
}

func (x *TestAllTypesEdition2023_GroupLikeType) Reset() { *x = TestAllTypesEdition2023_GroupLikeType{} }

func (x *TestAllTypesEdition2023_GroupLikeType) GetGroupInt32() int32 {
	if x != nil && x.GroupInt32 != nil {
		return *x.GroupInt32
	}
	return 0
}

func (x *TestAllTypesEdition2023_GroupLikeType) GetGroupUint32() uint32 {
	if x != nil && x.GroupUint32 != nil {
		return *x.GroupUint32
	}
	return 0
}

type ForeignMessageEdition2023 struct {
	C *int32 `protobuf:"varint,1,opt,name=c" json:"c,omitempty"`
}

func (x *ForeignMessageEdition2023) Reset() { *x = ForeignMessageEdition2023{} }

func (x *ForeignMessageEdition2023) GetC() int32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

type GroupLikeType struct {
	C *int32 `protobuf:"varint,1,opt,name=c" json:"c,omitempty"`
}

func (x *GroupLikeType) Reset() { *x = GroupLikeType{} }

func (x *GroupLikeType) GetC() int32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}
