// Code generated by prutalgen. DO NOT EDIT.
// prutalgen --proto_path=. --go_out=. --go_opt=paths=source_relative ./proto2.proto

package proto2

import "strconv"

type Message_NestedEnum int32

const (
	Message_ZERO Message_NestedEnum = 0
	Message_ONE  Message_NestedEnum = 1
	Message_TWO  Message_NestedEnum = 2
)

// Enum value maps for Message_NestedEnum.
var Message_NestedEnum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
	2: "TWO",
}

var Message_NestedEnum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
	"TWO":  2,
}

func (x Message_NestedEnum) String() string {
	s, ok := Message_NestedEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type Message struct {
	// Singular - optional
	OptionalInt32    *int32              `protobuf:"varint,1,opt,name=optional_int32" json:"optional_int32,omitempty"`
	OptionalInt64    *int64              `protobuf:"varint,2,opt,name=optional_int64" json:"optional_int64,omitempty"`
	OptionalUint32   *uint32             `protobuf:"varint,3,opt,name=optional_uint32" json:"optional_uint32,omitempty"`
	OptionalUint64   *uint64             `protobuf:"varint,4,opt,name=optional_uint64" json:"optional_uint64,omitempty"`
	OptionalSint32   *int32              `protobuf:"zigzag32,5,opt,name=optional_sint32" json:"optional_sint32,omitempty"`
	OptionalSint64   *int64              `protobuf:"zigzag64,6,opt,name=optional_sint64" json:"optional_sint64,omitempty"`
	OptionalFixed32  *uint32             `protobuf:"fixed32,7,opt,name=optional_fixed32" json:"optional_fixed32,omitempty"`
	OptionalFixed64  *uint64             `protobuf:"fixed64,8,opt,name=optional_fixed64" json:"optional_fixed64,omitempty"`
	OptionalSfixed32 *int32              `protobuf:"fixed32,9,opt,name=optional_sfixed32" json:"optional_sfixed32,omitempty"`
	OptionalSfixed64 *int64              `protobuf:"fixed64,10,opt,name=optional_sfixed64" json:"optional_sfixed64,omitempty"`
	OptionalFloat    *float32            `protobuf:"fixed32,11,opt,name=optional_float" json:"optional_float,omitempty"`
	OptionalDouble   *float64            `protobuf:"fixed64,12,opt,name=optional_double" json:"optional_double,omitempty"`
	OptionalBool     *bool               `protobuf:"varint,13,opt,name=optional_bool" json:"optional_bool,omitempty"`
	OptionalString   *string             `protobuf:"bytes,14,opt,name=optional_string" json:"optional_string,omitempty"`
	OptionalBytes    []byte              `protobuf:"bytes,15,opt,name=optional_bytes" json:"optional_bytes,omitempty"`
	OptionalEnum     *Message_NestedEnum `protobuf:"varint,16,opt,name=optional_enum" json:"optional_enum,omitempty"`

	// Singular - required
	RequiredInt32    *int32              `protobuf:"varint,1001,req,name=required_int32" json:"required_int32,omitempty"`
	RequiredInt64    *int64              `protobuf:"varint,1002,req,name=required_int64" json:"required_int64,omitempty"`
	RequiredUint32   *uint32             `protobuf:"varint,1003,req,name=required_uint32" json:"required_uint32,omitempty"`
	RequiredUint64   *uint64             `protobuf:"varint,1004,req,name=required_uint64" json:"required_uint64,omitempty"`
	RequiredSint32   *int32              `protobuf:"zigzag32,1005,req,name=required_sint32" json:"required_sint32,omitempty"`
	RequiredSint64   *int64              `protobuf:"zigzag64,1006,req,name=required_sint64" json:"required_sint64,omitempty"`
	RequiredFixed32  *uint32             `protobuf:"fixed32,1007,req,name=required_fixed32" json:"required_fixed32,omitempty"`
	RequiredFixed64  *uint64             `protobuf:"fixed64,1008,req,name=required_fixed64" json:"required_fixed64,omitempty"`
	RequiredSfixed32 *int32              `protobuf:"fixed32,1009,req,name=required_sfixed32" json:"required_sfixed32,omitempty"`
	RequiredSfixed64 *int64              `protobuf:"fixed64,1010,req,name=required_sfixed64" json:"required_sfixed64,omitempty"`
	RequiredFloat    *float32            `protobuf:"fixed32,1011,req,name=required_float" json:"required_float,omitempty"`
	RequiredDouble   *float64            `protobuf:"fixed64,1012,req,name=required_double" json:"required_double,omitempty"`
	RequiredBool     *bool               `protobuf:"varint,1013,req,name=required_bool" json:"required_bool,omitempty"`
	RequiredString   *string             `protobuf:"bytes,1014,req,name=required_string" json:"required_string,omitempty"`
	RequiredBytes    []byte              `protobuf:"bytes,1015,req,name=required_bytes" json:"required_bytes,omitempty"`
	RequiredEnum     *Message_NestedEnum `protobuf:"varint,1016,req,name=required_enum" json:"required_enum,omitempty"`

	// Repeated
	RepeatedInt32    []int32                  `protobuf:"varint,2001,rep,name=repeated_int32" json:"repeated_int32,omitempty"`
	RepeatedInt64    []int64                  `protobuf:"varint,2002,rep,name=repeated_int64" json:"repeated_int64,omitempty"`
	RepeatedUint32   []uint32                 `protobuf:"varint,2003,rep,name=repeated_uint32" json:"repeated_uint32,omitempty"`
	RepeatedUint64   []uint64                 `protobuf:"varint,2004,rep,name=repeated_uint64" json:"repeated_uint64,omitempty"`
	RepeatedSint32   []int32                  `protobuf:"zigzag32,2005,rep,name=repeated_sint32" json:"repeated_sint32,omitempty"`
	RepeatedSint64   []int64                  `protobuf:"zigzag64,2006,rep,name=repeated_sint64" json:"repeated_sint64,omitempty"`
	RepeatedFixed32  []uint32                 `protobuf:"fixed32,2007,rep,name=repeated_fixed32" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64  []uint64                 `protobuf:"fixed64,2008,rep,name=repeated_fixed64" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32 []int32                  `protobuf:"fixed32,2009,rep,name=repeated_sfixed32" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64 []int64                  `protobuf:"fixed64,2010,rep,name=repeated_sfixed64" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat    []float32                `protobuf:"fixed32,2011,rep,name=repeated_float" json:"repeated_float,omitempty"`
	RepeatedDouble   []float64                `protobuf:"fixed64,2012,rep,name=repeated_double" json:"repeated_double,omitempty"`
	RepeatedBool     []bool                   `protobuf:"varint,2013,rep,name=repeated_bool" json:"repeated_bool,omitempty"`
	RepeatedString   []string                 `protobuf:"bytes,2014,rep,name=repeated_string" json:"repeated_string,omitempty"`
	RepeatedBytes    [][]byte                 `protobuf:"bytes,2015,rep,name=repeated_bytes" json:"repeated_bytes,omitempty"`
	RepeatedEnum     []Message_NestedEnum     `protobuf:"varint,2016,rep,name=repeated_enum" json:"repeated_enum,omitempty"`
	RepeatedMsg      []*Message_NestedMessage `protobuf:"bytes,2017,rep,name=repeated_msg" json:"repeated_msg,omitempty"`

	// Repeated - packed
	PackedInt32    []int32              `protobuf:"varint,3001,rep,packed,name=packed_int32" json:"packed_int32,omitempty"`
	PackedInt64    []int64              `protobuf:"varint,3002,rep,packed,name=packed_int64" json:"packed_int64,omitempty"`
	PackedUint32   []uint32             `protobuf:"varint,3003,rep,packed,name=packed_uint32" json:"packed_uint32,omitempty"`
	PackedUint64   []uint64             `protobuf:"varint,3004,rep,packed,name=packed_uint64" json:"packed_uint64,omitempty"`
	PackedSint32   []int32              `protobuf:"zigzag32,3005,rep,packed,name=packed_sint32" json:"packed_sint32,omitempty"`
	PackedSint64   []int64              `protobuf:"zigzag64,3006,rep,packed,name=packed_sint64" json:"packed_sint64,omitempty"`
	PackedFixed32  []uint32             `protobuf:"fixed32,3007,rep,packed,name=packed_fixed32" json:"packed_fixed32,omitempty"`
	PackedFixed64  []uint64             `protobuf:"fixed64,3008,rep,packed,name=packed_fixed64" json:"packed_fixed64,omitempty"`
	PackedSfixed32 []int32              `protobuf:"fixed32,3009,rep,packed,name=packed_sfixed32" json:"packed_sfixed32,omitempty"`
	PackedSfixed64 []int64              `protobuf:"fixed64,3010,rep,packed,name=packed_sfixed64" json:"packed_sfixed64,omitempty"`
	PackedFloat    []float32            `protobuf:"fixed32,3011,rep,packed,name=packed_float" json:"packed_float,omitempty"`
	PackedDouble   []float64            `protobuf:"fixed64,3012,rep,packed,name=packed_double" json:"packed_double,omitempty"`
	PackedBool     []bool               `protobuf:"varint,3013,rep,packed,name=packed_bool" json:"packed_bool,omitempty"`
	PackedEnum     []Message_NestedEnum `protobuf:"varint,3016,rep,packed,name=packed_enum" json:"packed_enum,omitempty"`

	// Map
	MapInt32Int32          map[int32]int32                   `protobuf:"bytes,4001,rep,name=map_int32_int32" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64Int64          map[int64]int64                   `protobuf:"bytes,4002,rep,name=map_int64_int64" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32Uint32        map[uint32]uint32                 `protobuf:"bytes,4003,rep,name=map_uint32_uint32" json:"map_uint32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64Uint64        map[uint64]uint64                 `protobuf:"bytes,4004,rep,name=map_uint64_uint64" json:"map_uint64_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapSint32Sint32        map[int32]int32                   `protobuf:"bytes,4005,rep,name=map_sint32_sint32" json:"map_sint32_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	MapSint64Sint64        map[int64]int64                   `protobuf:"bytes,4006,rep,name=map_sint64_sint64" json:"map_sint64_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	MapFixed32Fixed32      map[uint32]uint32                 `protobuf:"bytes,4007,rep,name=map_fixed32_fixed32" json:"map_fixed32_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapFixed64Fixed64      map[uint64]uint64                 `protobuf:"bytes,4008,rep,name=map_fixed64_fixed64" json:"map_fixed64_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapSfixed32Sfixed32    map[int32]int32                   `protobuf:"bytes,4009,rep,name=map_sfixed32_sfixed32" json:"map_sfixed32_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapSfixed64Sfixed64    map[int64]int64                   `protobuf:"bytes,4010,rep,name=map_sfixed64_sfixed64" json:"map_sfixed64_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapInt32Float          map[int32]float32                 `protobuf:"bytes,4011,rep,name=map_int32_float" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapInt32Double         map[int32]float64                 `protobuf:"bytes,4012,rep,name=map_int32_double" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapBoolBool            map[bool]bool                     `protobuf:"bytes,4013,rep,name=map_bool_bool" json:"map_bool_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringString        map[string]string                 `protobuf:"bytes,4014,rep,name=map_string_string" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringBytes         map[string][]byte                 `protobuf:"bytes,4015,rep,name=map_string_bytes" json:"map_string_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringNestedMessage map[string]*Message_NestedMessage `protobuf:"bytes,4016,rep,name=map_string_nested_message" json:"map_string_nested_message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Message) Reset() { *x = Message{} }

type Message_NestedMessage struct {
	I32 *int32   `protobuf:"varint,1,opt,name=i32" json:"i32,omitempty"`
	M   *Message `protobuf:"bytes,2,opt,name=M" json:"M,omitempty"`
}

func (x *Message_NestedMessage) Reset() { *x = Message_NestedMessage{} }
